1. StockMapper.java 

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;


public class StockMapper extends MapReduceBase implements Mapper<LongWritable,Text,Text,IntWritable>
{
	public void map(LongWritable key, Text value,
			OutputCollector<Text, IntWritable> output, Reporter r)
			throws IOException {
		String line =value.toString();
		String []items=line.split(",");
		String stock=items[1];
		for(String word:stock.split(" "))
		{
			if(word.length()>0)
			{
				output.collect(new Text(word), new IntWritable(1));
			}
		}
				
	}

}


2. StockReducer.java 

import java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;


public class StockReducer extends MapReduceBase implements Reducer<Text,IntWritable,Text,IntWritable>
{

	
	public void reduce(Text key, Iterator<IntWritable> values,
			OutputCollector<Text, IntWritable> output, Reporter r)
			throws IOException {
		
	int count=0;
	while(values.hasNext())
	{
		IntWritable i= values.next();
		count+= i.get();
	}
	output.collect(key, new IntWritable(count));
		
	}
  
  
  3. StockCount.java 
  
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class StockCount extends Configured implements Tool {

	@Override
	public int run(String[] args) throws Exception {
	
	if(args.length<2)
	{
		System.out.println("Plz Give Input Output Directory Correctly");
		return -1;
	}
		
	JobConf conf = new JobConf(StockCount.class);
	FileInputFormat.setInputPaths(conf,new Path(args[0]));
	FileOutputFormat.setOutputPath(conf, new Path(args[1]));
	conf.setMapperClass(StockMapper.class);
	conf.setReducerClass(StockReducer.class);
	conf.setMapOutputKeyClass(Text.class);
	conf.setMapOutputValueClass(IntWritable.class);
	conf.setOutputKeyClass(Text.class);
	conf.setOutputValueClass(IntWritable.class);
	JobClient.runJob(conf);
	return 0;
	}

	public static void main(String args[]) throws Exception
	{
		int exitcode = ToolRunner.run(new StockCount(), args);
		System.exit(exitcode);
	}

}
